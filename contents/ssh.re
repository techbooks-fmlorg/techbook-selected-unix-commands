#@# 

=={ssh} @<term>{ssh}

他のコンピューター・サーバにSSH(Secure Shell)プロトコルで@<idx>{ログイン((ろぐいん))}する。
@<idx>{非対称鍵暗号((ひたいしょうかぎあんごう))}による認証と通信路の暗号化を行う商用インターネット時代のデファクトスタンダードツール。サーバ運用管理の必須ツール。

認証時には、
非対称鍵方式と@<idx>{対称鍵暗号((たいしょうかぎあんごう))}（パスワード）方式が利用できるが、
インターネットからアクセスできるサーバは公開鍵認証のみで運用するべきである。

=== 書式

//list[][][fontsize=xx-small]{
$ ssh  [options] DESTINATION
$ ssh  [options] DESTINATION [command [argument...]
//}

 *  @<code>{ssh サーバ}形式でサーバへ遠隔ログインできる
 ** 引数が「サーバ」形式の場合、
    サーバにログインするユーザ名は今コマンドを実行しているユーザ名と同じと想定される
 ** 「ユーザ@サーバ」つまりメールアドレス形式で、サーバのユーザ名を指定できる
 *  @<code>{ssh サーバ コマンド}形式でコマンドを遠隔実行できるが、演習では使わないため説明は省略

=== 実行例

==== 実行例

//list[][][fontsize=xx-small]{
$ ssh user@16.32.64.128
//}
==== 実行結果

//list[][][fontsize=xx-small]{
$ ssh user@16.32.64.128
    〜省略〜
user@16.32.64.128$ 
//}
最終行はシェルのプロンプトである。
この例では@<code>{$ }の左側に「ユーザー名@ipアドレス」が表示されている。


=== 知っていると便利なオプション: -i ファイル名

#@# X-TODO 秘密鍵という紛らわしい表現について

SSH接続に使用する秘密鍵ファイルを指定する。


===== 実行例

//list[][][fontsize=xx-small]{
$ ssh -i .ssh/id_rsa.pem user@16.32.64.128
//}
@<code>{.ssh/id_rsa.pem}の部分が秘密鍵ファイルである


===== 実行結果

//list[][][fontsize=xx-small]{
$ ssh -i .ssh/id_rsa.pem user@16.32.64.128
    〜省略〜
user@16.32.64.128$ 
//}
説明は同上なので省略
